<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工作 on Du, Chengbin's Blog</title><link>https://dcb9.github.io/tags/%E5%B7%A5%E4%BD%9C/</link><description>Recent content in 工作 on Du, Chengbin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright Du, Chengbin</copyright><lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0800</lastBuildDate><atom:link href="https://dcb9.github.io/tags/%E5%B7%A5%E4%BD%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>如何从服务端跟踪所有 HTTP 请求，并方便回放？</title><link>https://dcb9.github.io/posts/2017-03-31-track-and-replay-http-request/</link><pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2017-03-31-track-and-replay-http-request/</guid><description>客户端工程师：“xxx 接口坏了，我的程序都没动过”，后端经常会收到这样的质问，但是我们现在如何重现这个问题？有以下几种情况：
一、后端测试了一下发现没有问题
“我这里测试了是好的啊”，就只能让客户端工程师再操作一遍，亲眼看到错误之后就肯定是有问题了，就得去找问题，这时候这台手机，以及这台手机里面的数据都非常重要，因为这些数据可以让 Bug 重现。
二、测试了也有问题
这时候后端就去修改程序了，但是每一次的测试是否有问题都需要在客户端中操作，有时候的操作非常的复杂，在这上面花的时间会比较多。最后使了各种神通才终于找到问题，原来是这个用户的某某数据有异常才会出现这种情况。
以上这种情况屡见不鲜，最麻烦的点就在于，每次都要以出现 Bug 的相同参数去请求，有时候你知道这些请求的参数，可以把它们放到 Postman 这种工具里面，但大部分时候你并不知道它对应的参数 (token)
如果我们可以在服务端跟踪所有的请求：接口地址，Header，Body，后端返回的 Header、Body，这样我们就能查到对应的请求参数和返回值，可以直接填到 Postman 里面，要是还能一键重新请求就好了，因为我们不想修改请求的参数，只是想再以相同的参数请求一遍，这样我们来调试对应的程序。
正好以前用过 ngrok，发现它有一个非常好的 debug 界面，可以达到以上的要求，但现在不需要它的内网穿透功能，于是只能自己写一个程序，只包含以下功能：
记录接口所有的 Request 和 Response 可以一键重新请求某个 Request 基本工作原理
HTTP 客户端 Boast Web 服务器 | GET http://localhost:8080/ | 记录请求并进行反向代理 | Response 200 OK | ---------------------------&amp;gt; | --------------------------&amp;gt; | ------┐ | | | | | | 记录返回信息并转发给客户端 | &amp;lt;----┘ | &amp;lt;--------------------------- | &amp;lt;-------------------------- | ┌----------------------------------------------------------------------------┐ | url: http://localhost:8081 | | ---------------------------------------------------------------------------| | All Transactions ┌ - - - - - - - - - - - - - - - - - - - - - - - ┐ | | ---------------------- | time: 10 hours ago Client: 127.</description></item><item><title>Apple Push Services .cer to .pem</title><link>https://dcb9.github.io/posts/2017-03-09-aps-cer-to-pem/</link><pubDate>Thu, 09 Mar 2017 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2017-03-09-aps-cer-to-pem/</guid><description>Download certificates file, and install into your KeyChain login group (if you install into system group that you can&amp;rsquo;t export p12).
Convert p12 to pem: $ openssl pkcs12 -in Certificates.p12 -out Certificates.pem -nodes Check validity $ openssl x509 -in Certificates.pem -noout -dates Test pem Dev $ openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert Certificates.pem -key Certificates.pem Prod $ openssl s_client -connect gateway.push.apple.com:2195 -cert Certificates.pem -key Certificates.pem</description></item><item><title>本地开发——TCP Proxy 解决 API 必须绑定 IP 白名单才能访问的问题</title><link>https://dcb9.github.io/posts/2015-11-29-tcp-proxy-for-api-white-list/</link><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-11-29-tcp-proxy-for-api-white-list/</guid><description>本次对接一个票务系统的时候，他们那边的 API 访问需要在白名单的才可以访问，当时我就提出了个问题
问：那我在本地怎么调试开发啊？（因为我开发机 IP 是不固定的）
答：测试环境也要加，要不然怎么开发呢？
想了一下跟他们争肯定是争不过的了，那就是如何满足他们，想了一下，我有自己的公网服务器 IP，本地测试环境直接请求这台机器，它再把请求转发给相应的 API，这样我不管在哪里都可以开发了。
API 那边的 Host 还是 IP，即 http://x.x.y.z:port/api-route，这样服务端的那里只需要一个 TCP Proxy 就可以了，Google 了一下 tcproxy 这个小巧的非常入眼。
安装及使用 $ git clone https://github.com/dccmx/tcproxy.git $ cd tcproxy &amp;amp;&amp;amp; make ; echo $? # 输出 0 代表安装成功 $ nohup ./src/tcproxy &amp;#34;0.0.0.0:19999 -&amp;gt; rr{x.x.y.z:port}&amp;#34; &amp;amp; 代码里面的 Host 直接换成我自己的 ip:19999 端口就可以访问了。
使用这个有个注意的点，就是你的代码要有环境之分，不同的环境应可以自定义配置，参考 12 Factor 的配置</description></item><item><title>对于一台新服务器权限的配置</title><link>https://dcb9.github.io/posts/2015-05-29-init-permission-for-new-app-server/</link><pubDate>Fri, 29 May 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-05-29-init-permission-for-new-app-server/</guid><description>作为一个程序员，在网站没有运维的情况下，也要有能够搭建应用的能力，由于不是专业的运维所以考虑的问题可能不够全面，只顾着把应用搭起来，权限管理非常地松，认为只要登陆 root 可以运行命令就行了，这样的话会有很多后患的，有的时候只是未爆发出来，当爆发出来就已经晚了。
以下是我对一台新服务器的权限的实例，欢迎大家拍砖。
一、技术人员通过自己的普通用户权限进入系统，然后如果要运行需要 root 执行的就用 sudo 去执行就好，如果有多人要登录，则每人配一个帐号。
二、服务器上应该禁止密码登录，因为密码登录有一定的漏洞，有的技术人员设的密码跟没搞过计算机一样来个 123456，这个密码就相当于是个后门了。
三、由于每个人都有了帐号，那么更理所当然的要把 root 用户禁止登录，通过经验得知，如果不禁止，有的人还要登 root，原因可能有以下三点
不明白为什么要有普通帐号 对安全看的太轻，认为每次都要 sudo 去运行一个 root 权限才执行的命令很麻烦 用户管理 可能不懂权限，或许听说过，但绝对没用过 四、修改默认 ssh 端口
添加帐号 $ useradd bob $ mkdir -p /home/bob $ chown -R bob.bob /home/bob $ gpasswd -a bob sudo // 给用户有 sudo 的权限 $ passwd bob 设置一个密码，这个是作为当用户想要 sudo 去执行 root 执行的时候使用的 本地配置免密码登录 本地 ssh-keygen 生成一串密钥
本地 $ ssh-keygen /Users/bob/.ssh/some-app-server_id_rsa 本地 $ ssh-copy-id -i .</description></item><item><title>Yii2 项目部署流程</title><link>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</link><pubDate>Thu, 12 Mar 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</guid><description>网上现在有许多关于在 Yii2 下进行开发的文章，但对于如何把程序优雅地部署到线上介绍的还不是很多，下面我就来介绍一下我自己的部署流程。
概述 本地修改代码 -&amp;gt; 提交至版本控制仓库 -&amp;gt; master 分支有修改时自动部署到服务器
代码托管到 GitHub 原来也用过 coding.net，用了两个月发现它在许多地方表现的不是很如意，所以就迁到 GitHub 了。
修改代码 本地修改代码时不要直接修改 master 分支的代码，而是切出一个分支来做这个功能，做好之后把这个分支提交到远端仓库，功能完成之后，发起一个 Pull Request（后面就用 PR 代替），由另一个开发来检查一下代码，如果没有问题就合并到 master 分支。
当你的功能出来之后，需要同步到其它开发者，和线上服务器。你可能修改的代码如下：
依赖新的软件包 [3] 修改环境配置信息 [1] 创建或修改了数据库结构 [2] 另一个开发是不知道要如何部署的，除非你把全部的部署命令告诉他，于是我们创建一个脚本来解决这个问题，让一切自动完成，其它开发并不需要知道你又做了些什么，只需要做两件事：a. 更新代码 b. 运行部署脚本，线上服务器同样也只需要做这两件事，但脚本肯定不同，因为本地环境会安装许多的 debug 软件，而线上不需要，以及环境初始化的参数也不一样。
开发环境的部署脚本：
#!/bin/bash #./bin/dev/deploy.sh composer install # 它来把 composer 所有的依赖安装好 ./init --env=Development --overwrite=y # 重新初始化环境配置 # 等等 我们还有许多别的，例如： bower install ，因为我们的静态资源是使用的 bower 来管理的 线上部署脚本：
#!/bin/bash # file ./bin/prod/deploy.sh # .</description></item><item><title>加入 iDareX 团队</title><link>https://dcb9.github.io/posts/2014-12-02-join-idarex/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-12-02-join-idarex/</guid><description>今年 11 月 24 日正式加入 iDareX 团队，该团队非常有活力，可能是因为本来大家就爱运动的原因 ^_^, 团队里竟然还有开飞机的，还有方面的大牛，俗话说：“三人行，必有我师焉”，现在这里每个人都有N多长处，一时半会儿真心学不完啊。
晒一晒这一周学到的新的东西 AngularJS Bower Web 应用包管理器 git commit &amp;ndash;amend ApiGen neon sandbox zsh &amp;ndash; oh-my-zsh ssh-agent 使用 .ssh/config 来简化连接信息 ngrok 内网穿透 weinre Web移动应用调度工具 Device Mode &amp;amp; Mobile Emulation Remote Debugging on Android with Chrome Safari 也可以在电脑上动态调试 Yii2 现在正式启用了 独轮电动车 —— 这货听说是同事抽奖中的，感觉好利害的说。 现在对这些东西都只是了解，对它们的深入需要在后面工作和业余时间多多学习。</description></item><item><title>高可用的 Web 架构</title><link>https://dcb9.github.io/posts/2014-11-15/</link><pubDate>Sat, 15 Nov 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-11-15/</guid><description>最近工作需要，画了一幅比较典型的高可用 Web 架构图，这中间都是开源产品
所用软件列表：
HAProxy + Keepalived Nginx + php-fpm MySQL NFS MooseFS Redis Memcached 学习和使用这些软件就可以搭建一套非常棒的 Web 架构了，目前只有 NFS 是单点，因为其它的网络文件系统，通过测试发现性能都比不上 NFS ，所以这一层还是个单点，但是可以做 Lsyncd + Rsyncd 来做文件备份同步。</description></item><item><title>Bash shock 安全漏洞</title><link>https://dcb9.github.io/posts/2014-09-25-bash-shock/</link><pubDate>Thu, 25 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-25-bash-shock/</guid><description>昨天从微信上面，看到朋友发的最新的 bash 漏洞信息，感觉真的很可怕，现在互联网公司几乎都有使用到 bash。现在我来带领大家实践一下使用这个漏洞的过程。
使 Apache 支持 Bash CGI 首先要确认 Apache 里面的 CGI 模块已经被载入 在 httpd.conf 里面有一句：LoadModule cgi_module modules/mod_cgi.so 这个必须有，然后搜索 cgi-bin 如果没有的话添加一段 ScriptAlias /cgi-bin/ &amp;quot;/var/www/cgi-bin&amp;quot;
测试 bash cgi Hello world 编辑文件：$ vim /var/www/cgi-bin/hello.cgi
#!/bin/bash echo Content-type: text/html echo &amp;#34;&amp;#34; echo Hello, world. 执行以下命令：
$ chmod 755 /var/www/cgi-bin/hello.cgi` $ curl localhost/cgi-bin/hello.cgi 输出以下内容则代表Apache已经支持CGI了，就可以继续我们下面的测试 Hello, world. 最可怕的测试 $ curl -A &amp;#34;() { :; }; echo ; /bin/cat /etc/passwd&amp;#34; http://localhost/cgi-bin/hello.cgi root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/bin/false daemon:x:2:2:daemon:/sbin:/bin/false adm:x:3:4:adm:/var/adm:/bin/false lp:x:4:7:lp:/var/spool/lpd:/bin/false .</description></item><item><title>PHP MyAdmin 改造实现单点登录</title><link>https://dcb9.github.io/posts/2014-09-09-phpmyadmin-signon/</link><pubDate>Tue, 09 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-09-phpmyadmin-signon/</guid><description>修改配置文件 /* FILE: config.inc.php */ $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;auth_type&amp;#39;] = &amp;#39;signon&amp;#39;; $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;SignonSession&amp;#39;] = &amp;#39;SignonSession&amp;#39;; // 为了防止多个session的键的冲突，所以单独设置 个session名称 $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;SignonURL&amp;#39;] = &amp;#39;/signon.php&amp;#39;; // 自定义登录页面 $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;LogoutURL&amp;#39;] = &amp;#39;/signon.php?logout=1&amp;#39;; // 自定义登录页面的退出页面 配置登录程序 /* FILE: /signon.php */ if (isset($_GET[&amp;#39;logout&amp;#39;])) { session_destroy(); header(&amp;#39;Location: 网站原来的退出url&amp;#39;); exit; } $userDb = array( &amp;#39;单点登录后的用户名或id号&amp;#39; =&amp;gt; &amp;#39;给这个人分配的数据库的用户名&amp;#39;, ); // MySQL 中添加用户的时候密码为空就行。然后主要就是对于现在系统的用户名和数据库的用户名的一个映射， // 也可以就用现在的用户名作为数据库的用户名，不过得保证字符长度不得大于16， // 中文的用户名我也没弄过，如果弄中文的可能也会出问题。 $_SESSION[&amp;#39;PMA_single_signon_user&amp;#39;] = $userDb[$cookieofmanagername]; // 这个用户名一定要数据库存在并有相应的权限的。 $_SESSION[&amp;#39;PMA_single_signon_password&amp;#39;] = &amp;#39;&amp;#39;; echo &amp;#34;&amp;lt;script&amp;gt;top.location.href=&amp;#39;/phpmyadmin/index.php&amp;#39;;&amp;lt;/script&amp;gt;&amp;#34;;</description></item><item><title>2013 年我在晋江都做了什么？</title><link>https://dcb9.github.io/posts/2013-12-31-what-i-did-for-my-company-in-2013/</link><pubDate>Tue, 31 Dec 2013 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2013-12-31-what-i-did-for-my-company-in-2013/</guid><description>今年已经过去了，这一年是我提升最大的一年，有许多事虽然已经过去，但往后想想也挺有意思的，比如咱们的后宫，原来是 CTB 文本论坛，经常接到各位美女编辑的工作流，让我帮忙恢复帖子，后来论坛程序换成了 Discuz! 基于数据库的论坛，结果就是这些美女再也不找我了。
许多人经常会说“晋江老抽”，晋江突然成了酱油这让技术部很费解，我经常与刘总沟通，对刘总对网站的架构也耳濡目染，那就是任何一个点都不要单点，即使是买的专业软件，因为这样你会死的更惨，这个是有真实案例的。就这一个不要单点，对于文件系统来说，我们研究了 MooseFS，GlusterFS，Ceph 等多种网络文件系统，最终目前我们使用的是 MooseFS，最终期待能将 Ceph 运用到线上。任何一台数据库服务器都去单点，要做到这一点是不容易的。有的数据我们用行记录存储已经满足不了需要了，于是技术部研究针对新的数据，采用新的数据库来提升程序效率，我能做的就是将这些存储点去单点，保证数据的统一、冗余和灾备，让他们用的放心，目前配置的有 MongoDB 复制集与 RedisSentinel 集群。
虽然现在是在维护服务器，但对代码还有颗不死的心，于是结合程序和需求将公司职工 PHP MyAdmin 数据库权限，使它结合咱们的管理后台的用户权限，以及认证信息，实现了用户单点登录，以及对用户行为追踪的效果。公司业务不断的发展壮大，伴随的是大批量的数据统计等程序上线，而这些处理一般是以计划任务的形式出现，在以前的认知里认为写好了这个统计程序就已经无忧了，后来慢慢地，越来越多地意外发生，我们也意识到了机器出错的机率也很大啊！对于千奇百怪的计划任务的监控是我们特别需要的，于是自主开发了一套计划任务监控方案，有了这套方案过后，原来添加监控需要 1 天能完成的，现在可以缩短到 1 个小时。</description></item></channel></rss>