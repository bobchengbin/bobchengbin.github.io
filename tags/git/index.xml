<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Du, Chengbin's Blog</title><link>https://dcb9.github.io/tags/git/</link><description>Recent content in Git on Du, Chengbin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright Du, Chengbin</copyright><lastBuildDate>Wed, 10 Sep 2014 00:00:00 +0800</lastBuildDate><atom:link href="https://dcb9.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Learn Git SCM</title><link>https://dcb9.github.io/posts/2014-09-10-learning-git-scm/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-10-learning-git-scm/</guid><description>Git 是一个分布式的版本控制系统，SVN 的操作日志等都是存储在服务端，用户如果要查看修改记录等，每次都是需要联网的，我们公司目前就是使用的 SVN，由于经常上 GitHub 所以对 Git 有所好感，它没有 SVN 服务器这种单点故障，在对比差异和查看以前修改的版本时无需联网，对于这么牛的东西还是得好好学习一下。
第一章 起步 版本控制是很早以前就提出来了，最开始的时候是本地版本控制系统，最流行的叫 rcs，后来进化到集中化版本控制系统，再才过渡到分布式版本控制系统。
Git 诞生于 2005 年，因为 BitKeeper 与 Linux 内核开源社区的合作终止。承受后 Linus Tovalds 不得不开发属于自己的版本控制系统，他们对本次系统的目标有：
速度 简单的设计 对非线性开发模式的强力支持（允许上千个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量） Git 直接记录快照，而不是差异比较，SVN 会把每个文或几个文件在这个版本做了什么修改而记录下来，Git 则不然，它在每一次提交都是整个项目的快照。Git 中绝大多数都可以在本地完成，因为在本地磁盘上就保存了项目的历史版本信息。
文件的三种状态 已提交 committed 表示文件已经被安全地保存在本地数据库中了 已修改 modified 表示修改了某个文件，但还没有提交保存 已暂存 staged 表示把已修改的文件放在下次提交时要保存的清单中。 第一次运行 Git 的配置 使用Git之前需要配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。
$ git config --global user.name &amp;#34;John Doe&amp;#34; $ git config --global user.email johndoe@example.com $ git config --global core.</description></item></channel></rss>