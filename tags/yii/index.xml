<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yii on Du, Chengbin's Blog</title><link>https://dcb9.github.io/tags/yii/</link><description>Recent content in Yii on Du, Chengbin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright Du, Chengbin</copyright><lastBuildDate>Sun, 04 Sep 2016 00:00:00 +0800</lastBuildDate><atom:link href="https://dcb9.github.io/tags/yii/index.xml" rel="self" type="application/rss+xml"/><item><title>Alexander Makarov 于 CLOUDWAYS 的面试</title><link>https://dcb9.github.io/posts/2016-09-04/</link><pubDate>Sun, 04 Sep 2016 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2016-09-04/</guid><description>Alexander Makarov是一个高级工程师并且他是 Yii 框架的核心贡献者之一，同时他还是 Yii 2.0 Cookbook的作者
Alexander 在 Cloudways 面试中，讲述了他职业路径、对 Yii 框架的贡献以及 Yii 和其它框架的对比，最后他还给学生一些非常好的建议。
Cloudways: 跟读者分享一些你的故事吧，你是如何开始你的开发生涯的，是谁促动了你，还有截止现在你觉得自己做的最好的工作是什么？
Alexander: 读者们好！我是 Alexander Makarov 一名来自俄罗斯的 IT 工程师，大部分工作就是 Yii 框架和参与 PHP-FIG，最近，我全职在 stay.com上班，只能用我的空闲时间来维护 Yii，你可能在 Github 上见过我 @samdark。
当我还是个孩子的时候，我的父亲配置了一台 z80 的电脑，里面运行着 sinclair basic (BASIC 的编程方言)，当然还有游戏。玩游戏玩够了之后，我开始思考它们是怎么工作的，这些游戏是如何运转的。我喜欢自己明白的那种感觉，所以它决定了我需要正确地学习计算机科学。五年在大学获得了硕士学位，让我得到了一份在西门子做 DBA 和 Java/SAP 的工作，在那之后又过了 10 年，自从大学起我就使用 PHP 来做个人项目，因为它比 J2EE 在开发简单的 web 上更合适。
最开始 PHP 还是简单的，后来我使用了 CodeIgniter，很快发现它存在着许多的限制，之后搜索了许多完美的框架，试用了 CakePHP、Zend 和其它的，无意中打开了 Yii 官网（当时还很丑），查看了它的文档。它做地非常地合理，试用完 Yii 后，我发现它运行速度非常地快，并且很好地平衡了复杂难懂和简单的操作，让我的工作流程更舒适。2010 年我加入了 Yii 团队一直到现在，它是我做的最值得关注的开源工作。
Cloudways: 你在 stay.com 主要负责哪些工作？
Alexander: 主要负责开发网站、CMS 和 API，当 Android、服务器、SOLR 需要时，我会去帮忙。</description></item><item><title>Yii2 项目部署流程</title><link>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</link><pubDate>Thu, 12 Mar 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</guid><description>网上现在有许多关于在 Yii2 下进行开发的文章，但对于如何把程序优雅地部署到线上介绍的还不是很多，下面我就来介绍一下我自己的部署流程。
概述 本地修改代码 -&amp;gt; 提交至版本控制仓库 -&amp;gt; master 分支有修改时自动部署到服务器
代码托管到 GitHub 原来也用过 coding.net，用了两个月发现它在许多地方表现的不是很如意，所以就迁到 GitHub 了。
修改代码 本地修改代码时不要直接修改 master 分支的代码，而是切出一个分支来做这个功能，做好之后把这个分支提交到远端仓库，功能完成之后，发起一个 Pull Request（后面就用 PR 代替），由另一个开发来检查一下代码，如果没有问题就合并到 master 分支。
当你的功能出来之后，需要同步到其它开发者，和线上服务器。你可能修改的代码如下：
依赖新的软件包 [3] 修改环境配置信息 [1] 创建或修改了数据库结构 [2] 另一个开发是不知道要如何部署的，除非你把全部的部署命令告诉他，于是我们创建一个脚本来解决这个问题，让一切自动完成，其它开发并不需要知道你又做了些什么，只需要做两件事：a. 更新代码 b. 运行部署脚本，线上服务器同样也只需要做这两件事，但脚本肯定不同，因为本地环境会安装许多的 debug 软件，而线上不需要，以及环境初始化的参数也不一样。
开发环境的部署脚本：
#!/bin/bash #./bin/dev/deploy.sh composer install # 它来把 composer 所有的依赖安装好 ./init --env=Development --overwrite=y # 重新初始化环境配置 # 等等 我们还有许多别的，例如： bower install ，因为我们的静态资源是使用的 bower 来管理的 线上部署脚本：
#!/bin/bash # file ./bin/prod/deploy.sh # .</description></item><item><title>使用 Yii2 时遇到的实际问题</title><link>https://dcb9.github.io/posts/2014-11-17-yii2-usage/</link><pubDate>Mon, 17 Nov 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-11-17-yii2-usage/</guid><description>最近一直在学习 Yii2 框架，可能是一直以来对它的青睐，让我难以对其它框架再产生兴趣，学习中遇到了许多问题，于是把问题和解决办法也记录下来，这样方便以后复习和交流。
目录 扩展 XmlResponseFormatter 在原有的 Yii2 框架上，新建一个 api 应用 配置 Yii2 request Parser 使之可以通过 Yii::$app-&amp;gt;request-&amp;gt;post() 来接收 xml 和 json 的数据 使用 TimestampBehavior 来自动填充 created_at 和 updated_at 扩展 XmlResponseFormatter 在做微信接口测试的时候发现，每次返回数据的时候都是自己写的 xml 信息然后 echo 出来，今天突然看到了 Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_XML; 原来通过这个就可以设置返回的数据为 xml ，当然 response 这个类在 Controller 里面是没有加载的，所以首先得加载一下 use yii\web\Response; ，最后把需要返回的数据用数组的形式来返回即可：
&amp;lt;?php // ... ... use yii\web\Response; public function actionIndex(){ // ... ... 原来的逻辑代码 Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_XML; return [ &amp;#34;ToUserName&amp;#34;=&amp;gt;$postObject-&amp;gt;FromUserName, &amp;#34;FromUserName&amp;#34;=&amp;gt;$postObject-&amp;gt;ToUserName, &amp;#34;CreateTime&amp;#34;=&amp;gt;time(), &amp;#34;MsgType&amp;#34;=&amp;gt;&amp;#34;music&amp;#34;, &amp;#34;Music&amp;#34;=&amp;gt;[ &amp;#34;Title&amp;#34;=&amp;gt;$recognition, &amp;#34;Description&amp;#34;=&amp;gt;$decode, &amp;#34;MusicUrl&amp;#34;=&amp;gt;$musicurl, &amp;#34;HQMusicUrl&amp;#34;=&amp;gt;$musicurl, ] ]; } 这样使用之后发现请求得到的结果是：</description></item><item><title>Yii在Web分布式下将Session存储到Memcached</title><link>https://dcb9.github.io/posts/2014-10-11-yii-session-store-to-memcached/</link><pubDate>Sat, 11 Oct 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-10-11-yii-session-store-to-memcached/</guid><description>当网站的访问越来越大的时候一台机器无法支持迸发，或都是为了做到去单点，都需要在后端搭建一个集群来处理用户的请求，由于传统的PHP Session是文件级的存储，那么如果一个用户在第一次登录的时候这个Session文件存在 A 服务器上，而第二次的时候被分到了B 服务器上，则又认为他没有登录了（当然配置好负载均衡的是可以让同一个用户永远在同一台机器上的，这个的可以略过。。。），所以我们需要将它存在一个别的地方，我选的是Memcached，存在这里面，当然后期可能会选择Redis因为它在取值方面可以更精确，省内网带宽。
在Yii里面我想达到将Session信息存储到Memcached里面只需要稍做配置即可，我当前的Yii版本为yii-1.1.13.e9e4a0
修改componets配置文件 &amp;#39;session&amp;#39; =&amp;gt; array( &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;CCacheHttpSession&amp;#39;, &amp;#39;autoStart&amp;#39; =&amp;gt; true, &amp;#39;cacheID&amp;#39; =&amp;gt; &amp;#39;sessionCache&amp;#39;, // we only use the sessionCache to store the session &amp;#39;cookieMode&amp;#39; =&amp;gt; &amp;#39;only&amp;#39;, &amp;#39;timeout&amp;#39; =&amp;gt; 1400, ), &amp;#39;sessionCache&amp;#39; =&amp;gt; array( &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;system.caching.CMemCache&amp;#39;, &amp;#39;servers&amp;#39; =&amp;gt; array( array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.193&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 6), array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.226&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 3), array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.228&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 2), ), ), 测试一下登录没有问题，然后非常好奇，它真的就存入到Memcached里面了吗？我们如何来验证一下呢？ 为了省去新建一个Controller所以我就直接写一个action到SiteController里面去了。</description></item></channel></rss>