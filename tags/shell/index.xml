<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell on Du, Chengbin's Blog</title><link>https://dcb9.github.io/tags/shell/</link><description>Recent content in Shell on Du, Chengbin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright Du, Chengbin</copyright><lastBuildDate>Sat, 27 Dec 2014 00:00:00 +0800</lastBuildDate><atom:link href="https://dcb9.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>ssh-agent 使用指南</title><link>https://dcb9.github.io/posts/2014-12-27-ssh-agent-guide/</link><pubDate>Sat, 27 Dec 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-12-27-ssh-agent-guide/</guid><description>不知道你有没有遇到这样的情况，有二台以上的服务器(服务器系统是 windows 的不要往下看)需要管理，如果说你有这种情况，而且还没有用到 ssh-agent 的话，那么这篇文章就是为你而写。
假如你有三台服务器 s1.x.com s2.x.com s3.x.com，而且你都做好了登录到每一台机器的免密码功能。就是通过本地机器直接运行 ssh sN.x.com （注意：N）都可以连接到相应的服务器了，那么问题就来了，如果你现在已经连接到 s1 这台机器上，希望通过 s1 这台机器直接连到 s2 这台机器，并且不要输入密码，你测试了一下发现不行，为什么呢？因为 s1 和 s2 这两台机器没有做免密码登录功能，虽然我们可以把本地的私钥上传到 s1 服务器上，让它连接 s2 的时候就使用这个私钥，但是这样子做太危险了啊，如果有人进了你的系统，你整个内网都是可以直接进入的，因为已经拿到了你的私钥了嘛。ssh-agent 就是一个让你不把私钥上传到服务器上，就可以完成刚才的功能的一个工具，让你在这些服务器之间来去自如。
step1. 开启 ssh-agent $ eval ssh-agent Agent pid XXX
step2. 添加私钥 $ ssh-add ~/.ssh/id_rsa （如果生成密钥时是使用的默认的，那么就是这个了，如果不是的话就写你的私钥地址吧）
step3. 告诉ssh 允许 ssh-agent 转发 修改全局： $ echo &amp;#34;ForwardAgent yes&amp;#34; &amp;gt;&amp;gt; /etc/ssh/ssh_config 修改个人 $ touch ~/.ssh/config $ vim ~/.ssh/config Host * ForwardAgent yes step4. 修改每台服务器的 ssh 配置文件，让它们都对 ssh-agent 进行转发 到每台服务器上去按 step3 -&amp;gt; 全局，做一下。</description></item><item><title>Bash complete for DSH</title><link>https://dcb9.github.io/posts/2014-09-08-bash-shell-complete/</link><pubDate>Mon, 08 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-08-bash-shell-complete/</guid><description>我们有许多的服务器需要管理，所以就会使用到一个软件 dsh 来批量操作多台机器。默认是这样子的 $ dsh 各种参数加选项（但其实我们用的参数和选项的值永远都是那几个，连位置都不变 ） 指定组名 &amp;ldquo;需要执行的命令&amp;rdquo;，由于组名是定义在 /etc/dsh/group 目录下面的，所以在默认的 bash shell 里面，当我想让它自动补全组名的时候是不可以的。
目标 使用 DSH 这个命令来控制多台服务器 在使用 DSH 的时候，组名如果能够自动补全就好了（因为我在/etc/dsh/group/ 下有 groupA groupB groupC） 实现思路 dsh 使用的远程 shell 为 bash shell （其它的 shell 没玩过） 在连接机器的时候如果这台机器未在 .ssh/known_hosts 里面，希望系统能够自动输入 yes 不然太麻烦啦！ 通过 Bash shell 的 complete 来实现自定义tab键补全的功能 实现步骤 创建一个替代默认的 dsh 的脚本，放到 /usr/local/bin/ 目录下
# file: dsh.sh
GROUP=&amp;#34;$1&amp;#34; COMMAND=&amp;#34;$2&amp;#34; dsh -o &amp;#39;-o StrictHostKeyChecking=no&amp;#39; -c -M -g &amp;#34;$GROUP&amp;#34;&amp;#34;$COMMAND&amp;#34; # 这些参数我们使用的时候都是不变的 为这个脚本创建 键补全的 complete 程序 这个程序也放在 /usr/local/bin/ 目录下，这样方便以后的查看，或另一个人也能明白这个是干嘛的</description></item></channel></rss>