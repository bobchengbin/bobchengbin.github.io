<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Du, Chengbin's Blog</title><link>https://dcb9.github.io/</link><description>Recent content on Du, Chengbin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright Du, Chengbin</copyright><lastBuildDate>Fri, 03 May 2024 11:00:00 +0800</lastBuildDate><atom:link href="https://dcb9.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>打造私人影院</title><link>https://dcb9.github.io/posts/2024-05-03/</link><pubDate>Fri, 03 May 2024 11:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2024-05-03/</guid><description>分享使用 OpenWRT + Alist(百度网盘) + Jellyfin + TinyMediaManager 打造的私人影院，这不是一个 step-by-step 的教程，而是一些 Gist + 成果展示的分享，更多搭建过程参考结尾的#参考文章
Windows 挂载 Alist webdav 到本地盘符，给 TMM 搜刮 修改注册表 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WebClient\Parameters 把 BasicAuthLevel 设置为 2
0 = Basic authentication is disabled 1 = Basic authentication is enabled for SSL web sites only 2 = Basic authentication is enabled for SSL and non-SSL web sites windows powershell $ net stop webclient windows powershell $ net start webclient windows powershell $ net use Z: http://192.</description></item><item><title>常州行之龙年游龙城</title><link>https://dcb9.github.io/posts/2024-03-03/</link><pubDate>Sun, 03 Mar 2024 23:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2024-03-03/</guid><description>活捉一只变异野生恐龙~
2024 甲辰龙年英语为 Loong Year，弃用 Dragon 因为它与中国的龙完全不是一个物种且含义也不同。西方的龙代表着贪婪与邪恶；中国的龙与之相反代表着好运、高贵、丰收。
动车上看完了一直心心念念的梁祝
最近一周循环播放的音乐：上音何占豪作曲梁祝 时长 27min
常州文化广场，造型别致，让我想起来北京望京SOHO的时光
谢稚柳、陈佩秋《竹石灵犬图轴》 纸本水墨
泥塑人脸
魏晋南北朝时期是家具高度变化的时期，此前家具低矮，人们以跪坐为主，之后为高足，与现代的家具几乎无异
口腔卫生要注意，今年与妈妈一起看红楼梦，剧里面吃完饭漱口，这个习惯我们也跟着学，并保留下来了，图片最右边为钵盂盛净水用于漱口，然后吐到中间的唾盂中
现代手枪可能借鉴了弩机
夜幕中的亭台、天宁寺及其水波中的倒影</description></item><item><title>2022 年终总结</title><link>https://dcb9.github.io/posts/2022-12-31/</link><pubDate>Sat, 31 Dec 2022 12:50:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2022-12-31/</guid><description>今年的主要任务是移民的准备工作，从了解到一步一步地实施，总体进展顺利，虽然进度不快，但是稳且可控性高。
英语 ILAC: High-Advanced(Level 14) 学会使用英英词典 Longman Dictionary Macmillan Dictionary 移民 夫人顺利完成一学期学习 我提交了旅游签证（预计23年5月份可以出境） 大专做了 WES 的认证: 2-year Diploma in Computer Science and Technology 更正户口簿信息错误、并更换护照 分离的孤独、焦虑 我们有每天视频聊天，平均每天超过2小时 一起看视频: Skam, The Year Earth Changed 一起玩游戏: The Past Within, Don&amp;rsquo;t Starve Together, Dwarf Fortress 弄清楚了加拿大找工作需要的准备工作（就是明年的重点关注内容了) 英语 算法 系统设计 完善 LinkedIn 模拟面试 将主要的编程语言换成 Java 本科 自考真的是折磨人，就剩最后一门课程了，本来今年4月份考完就能申请毕业和学位了，结果河南取消了今年的两次考试，无奈只能明年考了，但时间越长感觉越没信心通过了……
概率论与数理统计学了一遍，没考又忘的差不多了 Youtuber 今年太宅了，没事做就是看 Youtube。</description></item><item><title>除法和减法的关系</title><link>https://dcb9.github.io/posts/2022-05-08/</link><pubDate>Sun, 08 May 2022 02:21:39 +0800</pubDate><guid>https://dcb9.github.io/posts/2022-05-08/</guid><description>同学们知道都乘法和加法之间的关系，乘法是几个相同的数相加的简便运算。对于除法，同学们知道它和乘法的关系，知道除法是乘法的逆运算，那除法和减法之间有什么关系呢？如何从减法来理解除法呢？
例如24÷3=8，如果从除法是乘法的逆运算角度来看，商8表示的是3的8倍是24.
也就是说：8个3连续相加，和是24，即3+3+3+3+3+3+3+3=24。
同学们接着从上面的加法等式出发，可以得出24-3-3-3-3-3-3-3-3=0，也就是说，24连续减去8个3，就可以把自己全部减完。
于是我们就把 24÷3=8 和 24-3-3-3-3-3-3-3-3=0 除法和减法联系了起来。
除法可以看作是连续减去相同的数的减法，或者说，与乘法是加法的简便运算一样，除法就是相同减数减法的简便运算。
被除数就是被减数，除数就是连续被减的相同的数，连续减的次数就是商。
如果减到最后还有剩余，那这个数就是余数。
除法和减法的这种联系，从符号的书写就可以看出端倪，乘号和加号接近，而除号和减号更像！
由此看来,加、减、乘、除虽是四种各自独立的运算,但它们之间又有着十分紧密的联系。
加法是在计数的基础上发展起来的一种连续性的计数,是最基本的运算。
减法是加法的逆运算,也就是加法的还原。
乘法又是加法的发展,是求相同加数加法的简便算法。
除法是乘法的逆运算,也就是乘法的还原。除法对减法来说,又是减法的发展,是求相同减数减法的简便算法。
同学们仔细梳理四则运算之间的关系，打通他们之间的联系，这样今后才能更加灵活的处理不同类型的计算和不同场景应用。
作者：丽老师
原文链接: 如何从减法的角度去理解除法？
读后感　 除法运算 =&amp;gt; 减法运算
减法运算 =&amp;gt; 加法运算
乘法去处 =&amp;gt; 加法运算
了解了四则去运算间的关系，我们的计算机就可以以最简洁的方式去实现，只需要实现一套加法运算，即可处理加减乘除这四种运算。</description></item><item><title>使用 Python 绘制多项式函数</title><link>https://dcb9.github.io/posts/2018-11-24/</link><pubDate>Sat, 24 Nov 2018 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2018-11-24/</guid><description>简介 高中你就会接触到多项式和多项式函数，本章教程完全依赖多项式，也就是说，我们将会花一节课的时间去了解多项式。下面是一个 4 次多项式的例子：
$$ p(x) = x^4 - 4 \cdot x^2 + 3 \cdot x $$
你会发觉它们跟整数有许多相似之处，本课我们将会定义多种多项式的算术操作，我们的 Polynomial 类也将提供计算多项式的推导和积分的方法，绘制多项式的图像。
多项式非常漂亮，现在最重要的是如何用 Python 类来实现它们，我们要感谢 Drew Shanon，他让我们使用他的精美的图片，将数学视为艺术！
数学知识介绍 我们将只会处理含有一个未知数的多项式，含有一个未知数的多项式的一般形式如下：
$$ a_n \cdot x^n + a_{n-1} \cdot x^{n-1} + &amp;hellip; + a_1 \cdot x + a_0 $$
\( a_0, a_1, &amp;hellip; a_n \) 为常数，\( x \) 为未知数，未知数也就是它没有一个特定的值，可以用任何数都可以用来替换。
这个表达式经常用求和符号来表示：
$$ \sum_{k=0}^{n}a_k \cdot x^k = a_n \cdot x^n + a_{n-1} \cdot x^{n-1} + &amp;hellip; + a_1 \cdot x + a_0 $$</description></item><item><title>Payment channel 支付通道参考资料</title><link>https://dcb9.github.io/posts/2018-10-26-payment-channel-references/</link><pubDate>Fri, 26 Oct 2018 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2018-10-26-payment-channel-references/</guid><description>最近在学习支付通道，所以罗列一下相关参考资料：
Learn Channels
Lightning network
Raiden network
Sparky: A Lightning Network in Two Pages of Solidity
Simple State channel demo repo State Channel for Dummies
Part 1 Payment Channels Part 2 App-Specific State Channels Part 3 Multi-Hop Transactions / Hub-and-Spoke Channels Part 4 Ledger Channels and Virtual Channels Part 5 Generalized State Channels / Counterfactual Part 6 Stale-State Griefing with Pisa State Channels for Babies</description></item><item><title>招商银行-E-招贷的年利率是多少</title><link>https://dcb9.github.io/posts/2018-09-08/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2018-09-08/</guid><description>以前并未完全了解银行贷款的年利率的计算规则，前两天在 Youtube 上看了李永乐老师讲的《贷款买房，利息怎么算？》，才明白利息的计算方法。
贷款的还款方式 银行贷款的还款方式有两种：1. 等额本金 2. 等额本息
等额本金 等额本金又称利随本清、等本不等息还款法。贷款人将本金分摊到每个月内，同时付清上一交易日至本次还款日之间的利息。
这种还款方式相对等额本息而言，总的利息支出较低，但是前期支付的本金和利息较多，还款负担逐月递减。
计算公式：
$$ 月利率 = \frac{年利率}{12} $$
$$ 每月本金 = \frac{总本金}{贷款月数} $$ $$ 累计已还本金 = 每月本金 x 还款月数 $$ $$ 剩余本金 = 总本金 - 累计已还本金 $$
$$ 每月利息 = 剩余本金 × 月利率 $$ $$ 每月还本付息(还款)金额 = 每月本金 + 每月利息 $$
$$ 还款总利息 =\frac{(贷款月数 + 1)x贷款额x月利率}{　2　}$$ $$ 还款总额 = 还款总利息 + 贷款额 $$
假设贷款 10 万元，年利率为 6%，贷款时间为 12 个月，则：</description></item><item><title>Plasma MVP 为什么需要发送交易后再生成 confirmation signature？</title><link>https://dcb9.github.io/posts/2018-09-06-why-we-need-two-phase-send-plus-confirmation-plasma-mvp/</link><pubDate>Thu, 06 Sep 2018 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2018-09-06-why-we-need-two-phase-send-plus-confirmation-plasma-mvp/</guid><description>以下内容翻译自 Ethereum Research ”Why do/don’t we need two phase sends plus confirmation” 的回复。
Generally, there are two major reasons why it’s necessary to have the two-phase send + conf in Plasma.
Plasma MVP 为什么有必要使用 send + confirm，主要有两个原因：
The first reason is specific to Plasma MVP and arises because Plasma MVP allows for fungible coins/tokens. Basically, if we don’t have confirmations, then an operator can place a user’s valid transactions after the operator’s invalid transactions in a block.</description></item><item><title>如何从服务端跟踪所有 HTTP 请求，并方便回放？</title><link>https://dcb9.github.io/posts/2017-03-31-track-and-replay-http-request/</link><pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2017-03-31-track-and-replay-http-request/</guid><description>客户端工程师：“xxx 接口坏了，我的程序都没动过”，后端经常会收到这样的质问，但是我们现在如何重现这个问题？有以下几种情况：
一、后端测试了一下发现没有问题
“我这里测试了是好的啊”，就只能让客户端工程师再操作一遍，亲眼看到错误之后就肯定是有问题了，就得去找问题，这时候这台手机，以及这台手机里面的数据都非常重要，因为这些数据可以让 Bug 重现。
二、测试了也有问题
这时候后端就去修改程序了，但是每一次的测试是否有问题都需要在客户端中操作，有时候的操作非常的复杂，在这上面花的时间会比较多。最后使了各种神通才终于找到问题，原来是这个用户的某某数据有异常才会出现这种情况。
以上这种情况屡见不鲜，最麻烦的点就在于，每次都要以出现 Bug 的相同参数去请求，有时候你知道这些请求的参数，可以把它们放到 Postman 这种工具里面，但大部分时候你并不知道它对应的参数 (token)
如果我们可以在服务端跟踪所有的请求：接口地址，Header，Body，后端返回的 Header、Body，这样我们就能查到对应的请求参数和返回值，可以直接填到 Postman 里面，要是还能一键重新请求就好了，因为我们不想修改请求的参数，只是想再以相同的参数请求一遍，这样我们来调试对应的程序。
正好以前用过 ngrok，发现它有一个非常好的 debug 界面，可以达到以上的要求，但现在不需要它的内网穿透功能，于是只能自己写一个程序，只包含以下功能：
记录接口所有的 Request 和 Response 可以一键重新请求某个 Request 基本工作原理
HTTP 客户端 Boast Web 服务器 | GET http://localhost:8080/ | 记录请求并进行反向代理 | Response 200 OK | ---------------------------&amp;gt; | --------------------------&amp;gt; | ------┐ | | | | | | 记录返回信息并转发给客户端 | &amp;lt;----┘ | &amp;lt;--------------------------- | &amp;lt;-------------------------- | ┌----------------------------------------------------------------------------┐ | url: http://localhost:8081 | | ---------------------------------------------------------------------------| | All Transactions ┌ - - - - - - - - - - - - - - - - - - - - - - - ┐ | | ---------------------- | time: 10 hours ago Client: 127.</description></item><item><title>Apple Push Services .cer to .pem</title><link>https://dcb9.github.io/posts/2017-03-09-aps-cer-to-pem/</link><pubDate>Thu, 09 Mar 2017 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2017-03-09-aps-cer-to-pem/</guid><description>Download certificates file, and install into your KeyChain login group (if you install into system group that you can&amp;rsquo;t export p12).
Convert p12 to pem: $ openssl pkcs12 -in Certificates.p12 -out Certificates.pem -nodes Check validity $ openssl x509 -in Certificates.pem -noout -dates Test pem Dev $ openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert Certificates.pem -key Certificates.pem Prod $ openssl s_client -connect gateway.push.apple.com:2195 -cert Certificates.pem -key Certificates.pem</description></item><item><title>Alexander Makarov 于 CLOUDWAYS 的面试</title><link>https://dcb9.github.io/posts/2016-09-04/</link><pubDate>Sun, 04 Sep 2016 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2016-09-04/</guid><description>Alexander Makarov是一个高级工程师并且他是 Yii 框架的核心贡献者之一，同时他还是 Yii 2.0 Cookbook的作者
Alexander 在 Cloudways 面试中，讲述了他职业路径、对 Yii 框架的贡献以及 Yii 和其它框架的对比，最后他还给学生一些非常好的建议。
Cloudways: 跟读者分享一些你的故事吧，你是如何开始你的开发生涯的，是谁促动了你，还有截止现在你觉得自己做的最好的工作是什么？
Alexander: 读者们好！我是 Alexander Makarov 一名来自俄罗斯的 IT 工程师，大部分工作就是 Yii 框架和参与 PHP-FIG，最近，我全职在 stay.com上班，只能用我的空闲时间来维护 Yii，你可能在 Github 上见过我 @samdark。
当我还是个孩子的时候，我的父亲配置了一台 z80 的电脑，里面运行着 sinclair basic (BASIC 的编程方言)，当然还有游戏。玩游戏玩够了之后，我开始思考它们是怎么工作的，这些游戏是如何运转的。我喜欢自己明白的那种感觉，所以它决定了我需要正确地学习计算机科学。五年在大学获得了硕士学位，让我得到了一份在西门子做 DBA 和 Java/SAP 的工作，在那之后又过了 10 年，自从大学起我就使用 PHP 来做个人项目，因为它比 J2EE 在开发简单的 web 上更合适。
最开始 PHP 还是简单的，后来我使用了 CodeIgniter，很快发现它存在着许多的限制，之后搜索了许多完美的框架，试用了 CakePHP、Zend 和其它的，无意中打开了 Yii 官网（当时还很丑），查看了它的文档。它做地非常地合理，试用完 Yii 后，我发现它运行速度非常地快，并且很好地平衡了复杂难懂和简单的操作，让我的工作流程更舒适。2010 年我加入了 Yii 团队一直到现在，它是我做的最值得关注的开源工作。
Cloudways: 你在 stay.com 主要负责哪些工作？
Alexander: 主要负责开发网站、CMS 和 API，当 Android、服务器、SOLR 需要时，我会去帮忙。</description></item><item><title>本地开发——TCP Proxy 解决 API 必须绑定 IP 白名单才能访问的问题</title><link>https://dcb9.github.io/posts/2015-11-29-tcp-proxy-for-api-white-list/</link><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-11-29-tcp-proxy-for-api-white-list/</guid><description>本次对接一个票务系统的时候，他们那边的 API 访问需要在白名单的才可以访问，当时我就提出了个问题
问：那我在本地怎么调试开发啊？（因为我开发机 IP 是不固定的）
答：测试环境也要加，要不然怎么开发呢？
想了一下跟他们争肯定是争不过的了，那就是如何满足他们，想了一下，我有自己的公网服务器 IP，本地测试环境直接请求这台机器，它再把请求转发给相应的 API，这样我不管在哪里都可以开发了。
API 那边的 Host 还是 IP，即 http://x.x.y.z:port/api-route，这样服务端的那里只需要一个 TCP Proxy 就可以了，Google 了一下 tcproxy 这个小巧的非常入眼。
安装及使用 $ git clone https://github.com/dccmx/tcproxy.git $ cd tcproxy &amp;amp;&amp;amp; make ; echo $? # 输出 0 代表安装成功 $ nohup ./src/tcproxy &amp;#34;0.0.0.0:19999 -&amp;gt; rr{x.x.y.z:port}&amp;#34; &amp;amp; 代码里面的 Host 直接换成我自己的 ip:19999 端口就可以访问了。
使用这个有个注意的点，就是你的代码要有环境之分，不同的环境应可以自定义配置，参考 12 Factor 的配置</description></item><item><title>另一个国内的 Ngrok 服务器分享</title><link>https://dcb9.github.io/posts/2015-11-04-share-ngrok/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-11-04-share-ngrok/</guid><description>ngrok 2.0 开始收费了，国内好几个 ngrok 倒下了，于是搭了一个供大家玩耍，只要还有钱就会给服务器续费的！
使用方法 下载客户端 MAC Linux Windows 创建配置文件 ngrok.cfg server_addr: &amp;#34;tunnel.phpor.me:4443&amp;#34; trust_host_root_certs: false 运行 $ ngrok -config ngrok.cfg -subdomain example 8080 News 2016-03-30 腾讯机房提示 phpor.me 域名未备案，将于 4 月 1 日禁止访问，惊恐之下去 ICP 查了下，备案确实被注销了，北京地区不能备案 .me 的域名，于是不备案了放到海外机房。
2016-02-07 02-05 3:44 ~ 02-07 23:16 故障
2015-12-28 20: 54 ~ 21: 27 故障
2015-12-24 好消息好消息，现在已经使用 DaoCloud + 腾讯云方式来部署了</description></item><item><title>对于一台新服务器权限的配置</title><link>https://dcb9.github.io/posts/2015-05-29-init-permission-for-new-app-server/</link><pubDate>Fri, 29 May 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-05-29-init-permission-for-new-app-server/</guid><description>作为一个程序员，在网站没有运维的情况下，也要有能够搭建应用的能力，由于不是专业的运维所以考虑的问题可能不够全面，只顾着把应用搭起来，权限管理非常地松，认为只要登陆 root 可以运行命令就行了，这样的话会有很多后患的，有的时候只是未爆发出来，当爆发出来就已经晚了。
以下是我对一台新服务器的权限的实例，欢迎大家拍砖。
一、技术人员通过自己的普通用户权限进入系统，然后如果要运行需要 root 执行的就用 sudo 去执行就好，如果有多人要登录，则每人配一个帐号。
二、服务器上应该禁止密码登录，因为密码登录有一定的漏洞，有的技术人员设的密码跟没搞过计算机一样来个 123456，这个密码就相当于是个后门了。
三、由于每个人都有了帐号，那么更理所当然的要把 root 用户禁止登录，通过经验得知，如果不禁止，有的人还要登 root，原因可能有以下三点
不明白为什么要有普通帐号 对安全看的太轻，认为每次都要 sudo 去运行一个 root 权限才执行的命令很麻烦 用户管理 可能不懂权限，或许听说过，但绝对没用过 四、修改默认 ssh 端口
添加帐号 $ useradd bob $ mkdir -p /home/bob $ chown -R bob.bob /home/bob $ gpasswd -a bob sudo // 给用户有 sudo 的权限 $ passwd bob 设置一个密码，这个是作为当用户想要 sudo 去执行 root 执行的时候使用的 本地配置免密码登录 本地 ssh-keygen 生成一串密钥
本地 $ ssh-keygen /Users/bob/.ssh/some-app-server_id_rsa 本地 $ ssh-copy-id -i .</description></item><item><title>Docker VS 虚拟机</title><link>https://dcb9.github.io/posts/2015-03-18/</link><pubDate>Wed, 18 Mar 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-03-18/</guid><description>本文翻译自：《Docker: Git for deployment &amp;ndash; Scout》，个人感觉它的内容和标题不对，所以就没有直译过来，要是我理解错了请帮忙纠正。
我听说了 Docker 多么令人惊叹，但是它并没有征服我的心，直到我提出一个实际的问题：【如果 Scout 使用 Docker 来部署，它会让我们的部署变得更顺利吗？】
以下是三个案例：
高效地模拟线上环境 我们线上有 16 台服务器，如果我尝试在本地使用 VirtualBox 配置每个实例 512 MB内存，那么它将占用我笔记本的两倍内存（说明他笔记本只有 4G 内存），VirtualBox 需要有许多多余的开支来管理每个子操作系统，Docker 在这方面是不一样的——容器共享同一个操作系统，更有可能是同样的二进制包文件和库文件，它可以运行在一台 Docker 主机上运行好几百个容器。
老方法 我不能在本地完全地模拟线上环境，让我们来看一下通过 Vagrant 启动一台机器需要花多久：
$ time vagrant up Bringing machine &amp;#39;default&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider... [default] Importing base box &amp;#39;squeeze64-ruby193&amp;#39;... ... [default] Booting VM... [default] Waiting for VM to boot. This can take a few minutes. ... real 1m32.052s 启动一个镜像需要一分半钟，如果我需要修改一个配置文件并检测是否能够正常工作，那么需要重启镜像，那又是可怕的一分半钟。
如果你配置的有错，那将是一个残忍的惩罚。（每次修改就需要一分半钟才能看到结果）</description></item><item><title>Yii2 项目部署流程</title><link>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</link><pubDate>Thu, 12 Mar 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-03-12-yii2-project-deploy/</guid><description>网上现在有许多关于在 Yii2 下进行开发的文章，但对于如何把程序优雅地部署到线上介绍的还不是很多，下面我就来介绍一下我自己的部署流程。
概述 本地修改代码 -&amp;gt; 提交至版本控制仓库 -&amp;gt; master 分支有修改时自动部署到服务器
代码托管到 GitHub 原来也用过 coding.net，用了两个月发现它在许多地方表现的不是很如意，所以就迁到 GitHub 了。
修改代码 本地修改代码时不要直接修改 master 分支的代码，而是切出一个分支来做这个功能，做好之后把这个分支提交到远端仓库，功能完成之后，发起一个 Pull Request（后面就用 PR 代替），由另一个开发来检查一下代码，如果没有问题就合并到 master 分支。
当你的功能出来之后，需要同步到其它开发者，和线上服务器。你可能修改的代码如下：
依赖新的软件包 [3] 修改环境配置信息 [1] 创建或修改了数据库结构 [2] 另一个开发是不知道要如何部署的，除非你把全部的部署命令告诉他，于是我们创建一个脚本来解决这个问题，让一切自动完成，其它开发并不需要知道你又做了些什么，只需要做两件事：a. 更新代码 b. 运行部署脚本，线上服务器同样也只需要做这两件事，但脚本肯定不同，因为本地环境会安装许多的 debug 软件，而线上不需要，以及环境初始化的参数也不一样。
开发环境的部署脚本：
#!/bin/bash #./bin/dev/deploy.sh composer install # 它来把 composer 所有的依赖安装好 ./init --env=Development --overwrite=y # 重新初始化环境配置 # 等等 我们还有许多别的，例如： bower install ，因为我们的静态资源是使用的 bower 来管理的 线上部署脚本：
#!/bin/bash # file ./bin/prod/deploy.sh # .</description></item><item><title>学习 PHP 程序新东西的另一种方法</title><link>https://dcb9.github.io/posts/2015-02-05-another-way-to-learning-program/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2015-02-05-another-way-to-learning-program/</guid><description>昨天在学习 SplDoublyLinkedList 的时候发现一个有趣的现象，比如
$obj = new SplDoublyLinkedList(); $obj-&amp;gt;push(&amp;#39;string&amp;#39;); 这时候想判断 $obj 里面到底有没有值，或是不是一个，并且里面的值为 &amp;lsquo;string&amp;rsquo;，我们通常会:
print_r($obj); 然后通过肉眼去看打印出来的，确实与我们想的一致，那么我们就会认为是成功的。如果不一致就会认为是失败的。
仔细想想，这种与我们要做的测试程序不是一模一样嘛，只不过测试程序是用来检测我们的代码有没有问题，但现在由于代码是 PHP 官网这种权威组织写的，我们可以认为都是对的，现在要是写测试程序的话，就是另一层函义了，不是测试他们的代码是否有问题，而是代表我们对这个功能的认识。
经常我们会用 print_r 来打印，有时候自己会主观的认为是这样是那样，然后看的也不一定很仔细，然后就认为是对的，最后实际使用时发现不是的想的那样（我有亲身经历），写测试就是让程序来判断，我们的想法是不是有问题，哪里出错了，最主要它还可以把当时的思路保持下来，以后再继续回顾。
以下是我在学习 SplDoublyLinkedList 时写的一些测试，以后看到这个测试类，就知道了 SplDoublyLinkedList 该怎么用了。
&amp;lt;?php class SplDoublyLinkedListTest extends PHPUnit_Framework_TestCase { public function testSplDoublyLinkedListPart1() { $obj = new SplDoublyLinkedList(); // Pushes value at the end of the doubly linked list. $obj-&amp;gt;push(0); $obj-&amp;gt;push(1); $obj-&amp;gt;push(2); // Prepends value at the beginning of the doubly linked list. $obj-&amp;gt;unshift(10); $obj-&amp;gt;unshift(11); /* * 因为指针还未初始化 * 所以 * 1.</description></item><item><title>ssh-agent 使用指南</title><link>https://dcb9.github.io/posts/2014-12-27-ssh-agent-guide/</link><pubDate>Sat, 27 Dec 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-12-27-ssh-agent-guide/</guid><description>不知道你有没有遇到这样的情况，有二台以上的服务器(服务器系统是 windows 的不要往下看)需要管理，如果说你有这种情况，而且还没有用到 ssh-agent 的话，那么这篇文章就是为你而写。
假如你有三台服务器 s1.x.com s2.x.com s3.x.com，而且你都做好了登录到每一台机器的免密码功能。就是通过本地机器直接运行 ssh sN.x.com （注意：N）都可以连接到相应的服务器了，那么问题就来了，如果你现在已经连接到 s1 这台机器上，希望通过 s1 这台机器直接连到 s2 这台机器，并且不要输入密码，你测试了一下发现不行，为什么呢？因为 s1 和 s2 这两台机器没有做免密码登录功能，虽然我们可以把本地的私钥上传到 s1 服务器上，让它连接 s2 的时候就使用这个私钥，但是这样子做太危险了啊，如果有人进了你的系统，你整个内网都是可以直接进入的，因为已经拿到了你的私钥了嘛。ssh-agent 就是一个让你不把私钥上传到服务器上，就可以完成刚才的功能的一个工具，让你在这些服务器之间来去自如。
step1. 开启 ssh-agent $ eval ssh-agent Agent pid XXX
step2. 添加私钥 $ ssh-add ~/.ssh/id_rsa （如果生成密钥时是使用的默认的，那么就是这个了，如果不是的话就写你的私钥地址吧）
step3. 告诉ssh 允许 ssh-agent 转发 修改全局： $ echo &amp;#34;ForwardAgent yes&amp;#34; &amp;gt;&amp;gt; /etc/ssh/ssh_config 修改个人 $ touch ~/.ssh/config $ vim ~/.ssh/config Host * ForwardAgent yes step4. 修改每台服务器的 ssh 配置文件，让它们都对 ssh-agent 进行转发 到每台服务器上去按 step3 -&amp;gt; 全局，做一下。</description></item><item><title>加入 iDareX 团队</title><link>https://dcb9.github.io/posts/2014-12-02-join-idarex/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-12-02-join-idarex/</guid><description>今年 11 月 24 日正式加入 iDareX 团队，该团队非常有活力，可能是因为本来大家就爱运动的原因 ^_^, 团队里竟然还有开飞机的，还有方面的大牛，俗话说：“三人行，必有我师焉”，现在这里每个人都有N多长处，一时半会儿真心学不完啊。
晒一晒这一周学到的新的东西 AngularJS Bower Web 应用包管理器 git commit &amp;ndash;amend ApiGen neon sandbox zsh &amp;ndash; oh-my-zsh ssh-agent 使用 .ssh/config 来简化连接信息 ngrok 内网穿透 weinre Web移动应用调度工具 Device Mode &amp;amp; Mobile Emulation Remote Debugging on Android with Chrome Safari 也可以在电脑上动态调试 Yii2 现在正式启用了 独轮电动车 —— 这货听说是同事抽奖中的，感觉好利害的说。 现在对这些东西都只是了解，对它们的深入需要在后面工作和业余时间多多学习。</description></item><item><title>使用 Yii2 时遇到的实际问题</title><link>https://dcb9.github.io/posts/2014-11-17-yii2-usage/</link><pubDate>Mon, 17 Nov 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-11-17-yii2-usage/</guid><description>最近一直在学习 Yii2 框架，可能是一直以来对它的青睐，让我难以对其它框架再产生兴趣，学习中遇到了许多问题，于是把问题和解决办法也记录下来，这样方便以后复习和交流。
目录 扩展 XmlResponseFormatter 在原有的 Yii2 框架上，新建一个 api 应用 配置 Yii2 request Parser 使之可以通过 Yii::$app-&amp;gt;request-&amp;gt;post() 来接收 xml 和 json 的数据 使用 TimestampBehavior 来自动填充 created_at 和 updated_at 扩展 XmlResponseFormatter 在做微信接口测试的时候发现，每次返回数据的时候都是自己写的 xml 信息然后 echo 出来，今天突然看到了 Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_XML; 原来通过这个就可以设置返回的数据为 xml ，当然 response 这个类在 Controller 里面是没有加载的，所以首先得加载一下 use yii\web\Response; ，最后把需要返回的数据用数组的形式来返回即可：
&amp;lt;?php // ... ... use yii\web\Response; public function actionIndex(){ // ... ... 原来的逻辑代码 Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_XML; return [ &amp;#34;ToUserName&amp;#34;=&amp;gt;$postObject-&amp;gt;FromUserName, &amp;#34;FromUserName&amp;#34;=&amp;gt;$postObject-&amp;gt;ToUserName, &amp;#34;CreateTime&amp;#34;=&amp;gt;time(), &amp;#34;MsgType&amp;#34;=&amp;gt;&amp;#34;music&amp;#34;, &amp;#34;Music&amp;#34;=&amp;gt;[ &amp;#34;Title&amp;#34;=&amp;gt;$recognition, &amp;#34;Description&amp;#34;=&amp;gt;$decode, &amp;#34;MusicUrl&amp;#34;=&amp;gt;$musicurl, &amp;#34;HQMusicUrl&amp;#34;=&amp;gt;$musicurl, ] ]; } 这样使用之后发现请求得到的结果是：</description></item><item><title>高可用的 Web 架构</title><link>https://dcb9.github.io/posts/2014-11-15/</link><pubDate>Sat, 15 Nov 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-11-15/</guid><description>最近工作需要，画了一幅比较典型的高可用 Web 架构图，这中间都是开源产品
所用软件列表：
HAProxy + Keepalived Nginx + php-fpm MySQL NFS MooseFS Redis Memcached 学习和使用这些软件就可以搭建一套非常棒的 Web 架构了，目前只有 NFS 是单点，因为其它的网络文件系统，通过测试发现性能都比不上 NFS ，所以这一层还是个单点，但是可以做 Lsyncd + Rsyncd 来做文件备份同步。</description></item><item><title>Robert's Resume</title><link>https://dcb9.github.io/posts/2014-11-05-resume/</link><pubDate>Wed, 05 Nov 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-11-05-resume/</guid><description>从事互联网开发马上 3 年时间，就职于盛大旗下的晋江文学城，主要工作是：维护 50 多台服务器、找性能欠佳的程序，并将其重新设计和改进、在公司自主发起多项任务并顺利完成：CTB 文本论坛成功转到 Discuz! [1]、本地测试环境的搭建、抛弃系统的计划任务，搭建计划任务管理系统。今年一月领导任命为技术小组组长，对任务的分配及工作流程有清析的认识。
基本信息 姓名：杜承斌　英文名：Bob 年龄：22　籍贯：重庆，现定居江苏 电话：15313521827　Email：bob@phpor.me Homepage: blog.phpor.me 技术专长 熟悉 NoSQL 的应用（Redis、MongoDB） 熟练使用 PHP 的 TDD[2]开发，研究过 Yii 的源码 熟练 MySQL 性能优化及大型网站架构搭建 对Gentoo Linux 有较深入的了解，以及在 2013 年获得了 RHCE 的认证 目前正在学习项目管理专业，对成本、进度、质量的控制有一定的了解 喜爱的运动 Freeline 经常在北京各地刷街，从回龙观到天安门，是滑的最远的一次，耗时近四个小时。 轮滑 这个是挺喜欢的，但北京还没找到比较近的轮滑场，倒是去滑了几次冰刀。 健身 去年的时候还很苗条，后来通过健身终于长上了一些肉，这样看起来不会一吹就倒。 [1]Discuz! 和 Discuz!X 商用的时候付费差别很大，如果只用作论坛就不要使用 Discuz!X 了[2]Test Driven Development 测试驱动开发。</description></item><item><title>Local development environment -- Vagrant</title><link>https://dcb9.github.io/posts/2014-10-12-vagrant-local-development-environment/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-10-12-vagrant-local-development-environment/</guid><description>Vagrant 对于本地开发来说真的是非常的棒，一般公司的开发人员都不止一个人，所以要每个开发人员都自己去搭建本地环境，会耗费非常多的时间，甚至还有可能会搭不起来的，就算搭起来了也不够统一，不能够和线上的保持一致。
Vagrant 是什么呢？ 它是基于 Virtual box(后面简称 VBox 了)而运行的，其实它就是在使用命令来控制 Vbox，它可以让你非常方便的去配置虚拟机，因为所有的配置都是在配置文件里面。
各种坑 一、静态文件 安装好 Apache 和 Nginx 首先来测试静态文件(我使用的是 .html 结尾的)，这些文件是从主机共享，然后虚拟机里面挂载的，使用的是Vagrant的：config.vm.synced_folder &amp;quot;/Users/bob/Documents/code/&amp;quot;, &amp;quot;/var/www/&amp;quot;，然后我在本地修改这些文件，发现在浏览器上刷新都不变，总是不相信浏览器，于是用命令行的 cURL 去测试，结果还是一样的，后来终于在网上搜到了帖子：《使用 Vagrant 打造跨平台开发环境》，它这里说到了， 不然的话它就不变。# Apache 配置添加: EnableSendfile off # Nginx 配置添加:sendfile off; 二、磁盘满了 这个其实不能算 Vagrant 的坑，而是自己不细心，但是放到这也是在提醒自己和读者不要忘记这件事。 三、文件权限 在 Windows 上的时候进入虚拟机后发现，共享的文件全部都是 777 的权限，而且还改不过来，这是怎么回事呢。这是 PHP MyAdmin 报出的错误：
Wrong permissions on configuration file, should not be world writable! ( ! ) Notice: Array to string conversion in /var/www/phpmyadmin/libraries/Error.class.php 通过一番 Google 之后终于找到了问题的解决：http://serverfault.com/questions/398414/vagrant-set-default-share-permissions， 可以在配置文件里面填写： config.</description></item><item><title>Yii在Web分布式下将Session存储到Memcached</title><link>https://dcb9.github.io/posts/2014-10-11-yii-session-store-to-memcached/</link><pubDate>Sat, 11 Oct 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-10-11-yii-session-store-to-memcached/</guid><description>当网站的访问越来越大的时候一台机器无法支持迸发，或都是为了做到去单点，都需要在后端搭建一个集群来处理用户的请求，由于传统的PHP Session是文件级的存储，那么如果一个用户在第一次登录的时候这个Session文件存在 A 服务器上，而第二次的时候被分到了B 服务器上，则又认为他没有登录了（当然配置好负载均衡的是可以让同一个用户永远在同一台机器上的，这个的可以略过。。。），所以我们需要将它存在一个别的地方，我选的是Memcached，存在这里面，当然后期可能会选择Redis因为它在取值方面可以更精确，省内网带宽。
在Yii里面我想达到将Session信息存储到Memcached里面只需要稍做配置即可，我当前的Yii版本为yii-1.1.13.e9e4a0
修改componets配置文件 &amp;#39;session&amp;#39; =&amp;gt; array( &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;CCacheHttpSession&amp;#39;, &amp;#39;autoStart&amp;#39; =&amp;gt; true, &amp;#39;cacheID&amp;#39; =&amp;gt; &amp;#39;sessionCache&amp;#39;, // we only use the sessionCache to store the session &amp;#39;cookieMode&amp;#39; =&amp;gt; &amp;#39;only&amp;#39;, &amp;#39;timeout&amp;#39; =&amp;gt; 1400, ), &amp;#39;sessionCache&amp;#39; =&amp;gt; array( &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;system.caching.CMemCache&amp;#39;, &amp;#39;servers&amp;#39; =&amp;gt; array( array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.193&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 6), array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.226&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 3), array( &amp;#39;host&amp;#39; =&amp;gt; &amp;#39;192.168.10.228&amp;#39;, &amp;#39;port&amp;#39; =&amp;gt; 11211, &amp;#39;weight&amp;#39; =&amp;gt; 2), ), ), 测试一下登录没有问题，然后非常好奇，它真的就存入到Memcached里面了吗？我们如何来验证一下呢？ 为了省去新建一个Controller所以我就直接写一个action到SiteController里面去了。</description></item><item><title>Bash shock 安全漏洞</title><link>https://dcb9.github.io/posts/2014-09-25-bash-shock/</link><pubDate>Thu, 25 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-25-bash-shock/</guid><description>昨天从微信上面，看到朋友发的最新的 bash 漏洞信息，感觉真的很可怕，现在互联网公司几乎都有使用到 bash。现在我来带领大家实践一下使用这个漏洞的过程。
使 Apache 支持 Bash CGI 首先要确认 Apache 里面的 CGI 模块已经被载入 在 httpd.conf 里面有一句：LoadModule cgi_module modules/mod_cgi.so 这个必须有，然后搜索 cgi-bin 如果没有的话添加一段 ScriptAlias /cgi-bin/ &amp;quot;/var/www/cgi-bin&amp;quot;
测试 bash cgi Hello world 编辑文件：$ vim /var/www/cgi-bin/hello.cgi
#!/bin/bash echo Content-type: text/html echo &amp;#34;&amp;#34; echo Hello, world. 执行以下命令：
$ chmod 755 /var/www/cgi-bin/hello.cgi` $ curl localhost/cgi-bin/hello.cgi 输出以下内容则代表Apache已经支持CGI了，就可以继续我们下面的测试 Hello, world. 最可怕的测试 $ curl -A &amp;#34;() { :; }; echo ; /bin/cat /etc/passwd&amp;#34; http://localhost/cgi-bin/hello.cgi root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/bin/false daemon:x:2:2:daemon:/sbin:/bin/false adm:x:3:4:adm:/var/adm:/bin/false lp:x:4:7:lp:/var/spool/lpd:/bin/false .</description></item><item><title>Learn Git SCM</title><link>https://dcb9.github.io/posts/2014-09-10-learning-git-scm/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-10-learning-git-scm/</guid><description>Git 是一个分布式的版本控制系统，SVN 的操作日志等都是存储在服务端，用户如果要查看修改记录等，每次都是需要联网的，我们公司目前就是使用的 SVN，由于经常上 GitHub 所以对 Git 有所好感，它没有 SVN 服务器这种单点故障，在对比差异和查看以前修改的版本时无需联网，对于这么牛的东西还是得好好学习一下。
第一章 起步 版本控制是很早以前就提出来了，最开始的时候是本地版本控制系统，最流行的叫 rcs，后来进化到集中化版本控制系统，再才过渡到分布式版本控制系统。
Git 诞生于 2005 年，因为 BitKeeper 与 Linux 内核开源社区的合作终止。承受后 Linus Tovalds 不得不开发属于自己的版本控制系统，他们对本次系统的目标有：
速度 简单的设计 对非线性开发模式的强力支持（允许上千个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量） Git 直接记录快照，而不是差异比较，SVN 会把每个文或几个文件在这个版本做了什么修改而记录下来，Git 则不然，它在每一次提交都是整个项目的快照。Git 中绝大多数都可以在本地完成，因为在本地磁盘上就保存了项目的历史版本信息。
文件的三种状态 已提交 committed 表示文件已经被安全地保存在本地数据库中了 已修改 modified 表示修改了某个文件，但还没有提交保存 已暂存 staged 表示把已修改的文件放在下次提交时要保存的清单中。 第一次运行 Git 的配置 使用Git之前需要配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。
$ git config --global user.name &amp;#34;John Doe&amp;#34; $ git config --global user.email johndoe@example.com $ git config --global core.</description></item><item><title>How to send E-mail on Gentoo</title><link>https://dcb9.github.io/posts/2014-09-09-gentoo-send-mail/</link><pubDate>Tue, 09 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-09-gentoo-send-mail/</guid><description>在我们的服务器上经常可能会出一些预计的错误，当服务器出错的时候，希望机器自动发送邮件给系统管理员，这样我们就能主动发现问题，并解决问题！其实这个需求就非常简单了，服务器只要可以发邮件就行，不需要什么 MTA 邮件传输代理服务器。
软件安装 $ emerge ssmtp mailx 配置 $ sudo vim /etc/ssmtp/ssmtp.conf 一般邮箱帐号的配置 root=youremailaccount@somedomain.com mailhub=smtp.domain.com rewriteDomain= hostname=smtp.domain.com AuthUser=your_user_name AuthPass=your_password FromLineOverride=Yes 公司Gmail邮箱的配置 root=duchengbin@jjwxc.com mailhub=smtp.gmail.com:587 UseSTARTTLS=YES AuthUser=duchengbin@jjwxc.com AuthPass=密码 FromLineOverride=YES 配置系统中的用户和对应发件人信息，比如用apache这个用户发邮件它的发件人是谁，用root发邮件它的发件人又是谁。 $ sudo vim /etc/ssmtp/revaliases 一般邮箱帐号 root:youraccount@domain.com:smtp.domain.com yournormaluser:youraccount@domain.com:smtp.domain.com 公司Gmail邮箱 root:duchengbin@gmail.com:smtp.gmail.com:587 yournormaluser:youraccount@gmail.com:smtp.gmail.com:587 测试发送邮件 # mailx 接收邮件的地址 主题： 内容，输入完内容按 ctrl+D 你会看到 Cc: 如果你想抄送给谁，就在这里写上他的邮箱，然后按回车就发送了，不填代表不抄送给任何人 直接使用命令行也可以发送邮件
$ echo &amp;#34;message content&amp;#34; | mailx -s &amp;#34;test subject&amp;#34; 邮件 以上整理的全部是参考以下链接，原文写的太棒了。链接
本人的 Gentoo 内核版本为：3.4.9-gentoo 安装的 ssmtp 及 mailx 版本为：
$ emerge -pv ssmtp mailx [ebuild R ] mail-mta/ssmtp-2.</description></item><item><title>PHP MyAdmin 改造实现单点登录</title><link>https://dcb9.github.io/posts/2014-09-09-phpmyadmin-signon/</link><pubDate>Tue, 09 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-09-phpmyadmin-signon/</guid><description>修改配置文件 /* FILE: config.inc.php */ $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;auth_type&amp;#39;] = &amp;#39;signon&amp;#39;; $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;SignonSession&amp;#39;] = &amp;#39;SignonSession&amp;#39;; // 为了防止多个session的键的冲突，所以单独设置 个session名称 $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;SignonURL&amp;#39;] = &amp;#39;/signon.php&amp;#39;; // 自定义登录页面 $cfg[&amp;#39;Servers&amp;#39;][$i][&amp;#39;LogoutURL&amp;#39;] = &amp;#39;/signon.php?logout=1&amp;#39;; // 自定义登录页面的退出页面 配置登录程序 /* FILE: /signon.php */ if (isset($_GET[&amp;#39;logout&amp;#39;])) { session_destroy(); header(&amp;#39;Location: 网站原来的退出url&amp;#39;); exit; } $userDb = array( &amp;#39;单点登录后的用户名或id号&amp;#39; =&amp;gt; &amp;#39;给这个人分配的数据库的用户名&amp;#39;, ); // MySQL 中添加用户的时候密码为空就行。然后主要就是对于现在系统的用户名和数据库的用户名的一个映射， // 也可以就用现在的用户名作为数据库的用户名，不过得保证字符长度不得大于16， // 中文的用户名我也没弄过，如果弄中文的可能也会出问题。 $_SESSION[&amp;#39;PMA_single_signon_user&amp;#39;] = $userDb[$cookieofmanagername]; // 这个用户名一定要数据库存在并有相应的权限的。 $_SESSION[&amp;#39;PMA_single_signon_password&amp;#39;] = &amp;#39;&amp;#39;; echo &amp;#34;&amp;lt;script&amp;gt;top.location.href=&amp;#39;/phpmyadmin/index.php&amp;#39;;&amp;lt;/script&amp;gt;&amp;#34;;</description></item><item><title>Bash complete for DSH</title><link>https://dcb9.github.io/posts/2014-09-08-bash-shell-complete/</link><pubDate>Mon, 08 Sep 2014 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2014-09-08-bash-shell-complete/</guid><description>我们有许多的服务器需要管理，所以就会使用到一个软件 dsh 来批量操作多台机器。默认是这样子的 $ dsh 各种参数加选项（但其实我们用的参数和选项的值永远都是那几个，连位置都不变 ） 指定组名 &amp;ldquo;需要执行的命令&amp;rdquo;，由于组名是定义在 /etc/dsh/group 目录下面的，所以在默认的 bash shell 里面，当我想让它自动补全组名的时候是不可以的。
目标 使用 DSH 这个命令来控制多台服务器 在使用 DSH 的时候，组名如果能够自动补全就好了（因为我在/etc/dsh/group/ 下有 groupA groupB groupC） 实现思路 dsh 使用的远程 shell 为 bash shell （其它的 shell 没玩过） 在连接机器的时候如果这台机器未在 .ssh/known_hosts 里面，希望系统能够自动输入 yes 不然太麻烦啦！ 通过 Bash shell 的 complete 来实现自定义tab键补全的功能 实现步骤 创建一个替代默认的 dsh 的脚本，放到 /usr/local/bin/ 目录下
# file: dsh.sh
GROUP=&amp;#34;$1&amp;#34; COMMAND=&amp;#34;$2&amp;#34; dsh -o &amp;#39;-o StrictHostKeyChecking=no&amp;#39; -c -M -g &amp;#34;$GROUP&amp;#34;&amp;#34;$COMMAND&amp;#34; # 这些参数我们使用的时候都是不变的 为这个脚本创建 键补全的 complete 程序 这个程序也放在 /usr/local/bin/ 目录下，这样方便以后的查看，或另一个人也能明白这个是干嘛的</description></item><item><title>2013 年我在晋江都做了什么？</title><link>https://dcb9.github.io/posts/2013-12-31-what-i-did-for-my-company-in-2013/</link><pubDate>Tue, 31 Dec 2013 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/posts/2013-12-31-what-i-did-for-my-company-in-2013/</guid><description>今年已经过去了，这一年是我提升最大的一年，有许多事虽然已经过去，但往后想想也挺有意思的，比如咱们的后宫，原来是 CTB 文本论坛，经常接到各位美女编辑的工作流，让我帮忙恢复帖子，后来论坛程序换成了 Discuz! 基于数据库的论坛，结果就是这些美女再也不找我了。
许多人经常会说“晋江老抽”，晋江突然成了酱油这让技术部很费解，我经常与刘总沟通，对刘总对网站的架构也耳濡目染，那就是任何一个点都不要单点，即使是买的专业软件，因为这样你会死的更惨，这个是有真实案例的。就这一个不要单点，对于文件系统来说，我们研究了 MooseFS，GlusterFS，Ceph 等多种网络文件系统，最终目前我们使用的是 MooseFS，最终期待能将 Ceph 运用到线上。任何一台数据库服务器都去单点，要做到这一点是不容易的。有的数据我们用行记录存储已经满足不了需要了，于是技术部研究针对新的数据，采用新的数据库来提升程序效率，我能做的就是将这些存储点去单点，保证数据的统一、冗余和灾备，让他们用的放心，目前配置的有 MongoDB 复制集与 RedisSentinel 集群。
虽然现在是在维护服务器，但对代码还有颗不死的心，于是结合程序和需求将公司职工 PHP MyAdmin 数据库权限，使它结合咱们的管理后台的用户权限，以及认证信息，实现了用户单点登录，以及对用户行为追踪的效果。公司业务不断的发展壮大，伴随的是大批量的数据统计等程序上线，而这些处理一般是以计划任务的形式出现，在以前的认知里认为写好了这个统计程序就已经无忧了，后来慢慢地，越来越多地意外发生，我们也意识到了机器出错的机率也很大啊！对于千奇百怪的计划任务的监控是我们特别需要的，于是自主开发了一套计划任务监控方案，有了这套方案过后，原来添加监控需要 1 天能完成的，现在可以缩短到 1 个小时。</description></item><item><title>About</title><link>https://dcb9.github.io/about/</link><pubDate>Tue, 13 Apr 1993 00:00:00 +0800</pubDate><guid>https://dcb9.github.io/about/</guid><description>无为而治
终身学习
努力不一定能成功，但不努力你将一事无成！
(2022-05-08) 未来5年计划:
热爱生活 坚持锻炼 到加拿大工作、生活 把数学当作长期的兴趣 拿到计算机领域硕士学位 熟练地使用英文字典学习新的单词</description></item></channel></rss>